{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\src\\\\pages\\\\Events.js\";\nimport React, { Component } from \"react\";\nimport Modal from \"../components/Modal/Modal\";\nimport Backdrop from \"../components/Backdrop/Backdrop\";\nimport EventList from \"../components/Events/EventList/EventList\";\nimport Spinner from \"../components/Spinner/Spinner\";\nimport AuthContext from \"../context/auth-context\";\nimport \"../pages/Events.css\";\n\nvar EventsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventsPage, _Component);\n\n  function EventsPage(props) {\n    var _this;\n\n    _classCallCheck(this, EventsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventsPage).call(this, props));\n\n    _this.componentDidMount = function () {\n      _this.fetchEvents();\n    };\n\n    _this.state = {\n      creating: false,\n      events: [],\n      isLoading: false,\n      selectedEvent: null\n    };\n    _this.isActive = true;\n\n    _this.startCreateEvent = function () {\n      _this.setState({\n        creating: true\n      });\n    };\n\n    _this.modalCancelHandler = function () {\n      _this.setState({\n        creating: false,\n        selectedEvent: null\n      });\n    };\n\n    _this.onDetailsHandler = function (eventId) {\n      _this.setState(function (prevState) {\n        var selectedEvent = prevState.events.find(function (event) {\n          return event._id === eventId;\n        });\n        return {\n          selectedEvent: selectedEvent\n        };\n      });\n    };\n\n    _this.bookEventHandler = function () {\n      if (!_this.context.token) {\n        _this.setState({\n          selectedEvent: null\n        });\n\n        return;\n      }\n\n      var requestBody = {\n        query: \"\\n        mutation {\\n          bookEvent(eventId: \\\"\".concat(_this.state.selectedEvent._id, \"\\\") {\\n            _id\\n            createdAt\\n            updatedAt\\n          }\\n        }\\n      \")\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Authorization\": \"Bearer \".concat(_this.context.token),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          selectedEvent: null\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.modalConfirmHandler = function () {\n      var title = _this.titleElRef.current.value;\n      var price = _this.priceElRef.current.value;\n      var date = _this.dateElRef.current.value;\n      var description = _this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price.trim().length === 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      } //const event = { title, price, date, description }\n\n\n      var requestBody = {\n        query: \"\\n        mutation {\\n          createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", price: \").concat(price, \", date: \\\"\").concat(date, \"\\\", description: \\\"\").concat(description, \"\\\"}) {\\n            _id\\n            title\\n            description\\n            price\\n            date            \\n          }\\n        }\\n      \")\n      };\n      var token = _this.context.token;\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Authorization\": \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState(function (prevState) {\n          return {\n            events: [].concat(_toConsumableArray(prevState.events), [resData.data.createEvent])\n          };\n        });\n\n        _this.modalCancelHandler();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.titleElRef = React.createRef();\n    _this.priceElRef = React.createRef();\n    _this.dateElRef = React.createRef();\n    _this.descriptionElRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(EventsPage, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isActive = false;\n    }\n  }, {\n    key: \"fetchEvents\",\n    value: function fetchEvents() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      });\n      var requestBody = {\n        query: \"\\n        query { \\n          events {\\n            _id\\n            title\\n            description\\n            price\\n            date\\n            creator {\\n              _id\\n            }\\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        if (_this2.isActive) {\n          _this2.setState({\n            events: resData.data.events,\n            isLoading: false\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n\n        _this2.setState({\n          isLoading: false\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, (this.state.creating || this.state.selectedEvent) && React.createElement(Backdrop, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }), this.state.creating && React.createElement(Modal, {\n        title: \"Add Event\",\n        confirmTitle: \"Confirm\",\n        canCancel: true,\n        canConfirm: true,\n        onCancel: this.modalCancelHandler,\n        onConfirm: this.modalConfirmHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"Title\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        ref: this.titleElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"price\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Price\"), React.createElement(\"input\", {\n        type: \"number\",\n        id: \"price\",\n        ref: this.priceElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"input\", {\n        type: \"datetime-local\",\n        id: \"date\",\n        ref: this.dateElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"textarea\", {\n        id: \"description\",\n        rows: \"4\",\n        ref: this.descriptionElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })))), this.state.selectedEvent && React.createElement(Modal, {\n        title: this.state.selectedEvent.title,\n        canCancel: true,\n        canConfirm: true,\n        confirmTitle: this.context.token ? \"Book\" : \"Confirm\",\n        onCancel: this.modalCancelHandler,\n        onConfirm: this.bookEventHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }, this.state.selectedEvent.title), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"$\", Intl.NumberFormat().format(this.state.selectedEvent.price), \" - \", new Date(this.state.selectedEvent.date).toLocaleDateString()), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, this.state.selectedEvent.description)), this.context.token && React.createElement(\"div\", {\n        className: \"events-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Share your own Events!\"), React.createElement(\"button\", {\n        onClick: this.startCreateEvent,\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"Create Event\")), this.state.isLoading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }) : React.createElement(EventList, {\n        openViewDetails: this.onDetailsHandler,\n        events: this.state.events,\n        userId: this.context.userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EventsPage;\n}(Component);\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\graphql-react-event-booking\\frontend\\src\\pages\\Events.js"],"names":["React","Component","Modal","Backdrop","EventList","Spinner","AuthContext","EventsPage","props","componentDidMount","fetchEvents","state","creating","events","isLoading","selectedEvent","isActive","startCreateEvent","setState","modalCancelHandler","onDetailsHandler","eventId","prevState","find","event","_id","bookEventHandler","context","token","requestBody","query","fetch","method","body","JSON","stringify","headers","then","result","status","Error","json","resData","catch","error","console","log","modalConfirmHandler","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","data","createEvent","createRef","Intl","NumberFormat","format","Date","toLocaleDateString","userId","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Modal from \"../components/Modal/Modal\";\r\nimport Backdrop from \"../components/Backdrop/Backdrop\";\r\nimport EventList from \"../components/Events/EventList/EventList\"\r\nimport Spinner from \"../components/Spinner/Spinner\";\r\n\r\nimport AuthContext from \"../context/auth-context\";\r\n\r\nimport \"../pages/Events.css\";\r\n\r\nclass EventsPage extends Component {\r\n  static contextType = AuthContext\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.titleElRef = React.createRef()\r\n    this.priceElRef = React.createRef()\r\n    this.dateElRef = React.createRef()\r\n    this.descriptionElRef = React.createRef()\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchEvents()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.isActive = false;\r\n  }\r\n  \r\n\r\n  state = {\r\n    creating: false,\r\n    events: [],\r\n    isLoading: false,\r\n    selectedEvent: null\r\n  }\r\n  isActive = true;\r\n\r\n  startCreateEvent = () => {\r\n    this.setState({ creating: true })\r\n  }\r\n\r\n  modalCancelHandler = () => {\r\n    this.setState({ creating: false, selectedEvent: null })\r\n  }\r\n\r\n  onDetailsHandler = (eventId) => {    \r\n    this.setState(prevState => {\r\n      const selectedEvent = prevState.events.find(event => event._id === eventId)\r\n      return { selectedEvent: selectedEvent }\r\n    })\r\n  }\r\n\r\n  bookEventHandler = () => {\r\n    if(!this.context.token) {\r\n      this.setState({selectedEvent: null})\r\n      return;\r\n    }\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          bookEvent(eventId: \"${this.state.selectedEvent._id}\") {\r\n            _id\r\n            createdAt\r\n            updatedAt\r\n          }\r\n        }\r\n      `\r\n    }    \r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Authorization\": `Bearer ${this.context.token}`,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {        \r\n        this.setState({selectedEvent: null})   \r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  fetchEvents() {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        query { \r\n          events {\r\n            _id\r\n            title\r\n            description\r\n            price\r\n            date\r\n            creator {\r\n              _id\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        if(this.isActive){\r\n          this.setState({ events: resData.data.events, isLoading: false });\r\n        }        \r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  modalConfirmHandler = () => {\r\n    const title = this.titleElRef.current.value;\r\n    const price = this.priceElRef.current.value;\r\n    const date = this.dateElRef.current.value;\r\n    const description = this.descriptionElRef.current.value;\r\n\r\n    if (title.trim().length === 0 || price.trim().length === 0 || date.trim().length === 0 || description.trim().length === 0) {\r\n      return;\r\n    }\r\n\r\n    //const event = { title, price, date, description }\r\n\r\n    const requestBody = {\r\n      query: `\r\n        mutation {\r\n          createEvent(eventInput: {title: \"${title}\", price: ${price}, date: \"${date}\", description: \"${description}\"}) {\r\n            _id\r\n            title\r\n            description\r\n            price\r\n            date            \r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    const token = this.context.token\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Authorization\": `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState((prevState) => {\r\n          return { events: [...prevState.events, resData.data.createEvent] }\r\n        })\r\n        this.modalCancelHandler();\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {(this.state.creating || this.state.selectedEvent) && <Backdrop></Backdrop>}\r\n        {this.state.creating && (\r\n          <Modal title=\"Add Event\" confirmTitle=\"Confirm\" canCancel canConfirm onCancel={this.modalCancelHandler} onConfirm={this.modalConfirmHandler}>\r\n            <form>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"price\">Price</label>\r\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"date\">Date</label>\r\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea id=\"description\" rows=\"4\" ref={this.descriptionElRef} />\r\n              </div>\r\n            </form>\r\n          </Modal>\r\n        )}\r\n        {this.state.selectedEvent && (\r\n          <Modal\r\n            title={this.state.selectedEvent.title}\r\n            canCancel\r\n            canConfirm\r\n            confirmTitle={this.context.token ? \"Book\" : \"Confirm\"}\r\n            onCancel={this.modalCancelHandler}\r\n            onConfirm={this.bookEventHandler}\r\n          >\r\n            <h1>{this.state.selectedEvent.title}</h1>\r\n            <h2>${Intl.NumberFormat().format(this.state.selectedEvent.price)} - {new Date(this.state.selectedEvent.date).toLocaleDateString()}</h2>\r\n            <p>{this.state.selectedEvent.description}</p>\r\n          </Modal>\r\n        )}\r\n        {this.context.token && (\r\n          <div className=\"events-control\">\r\n            <p>Share your own Events!</p>\r\n            <button onClick={this.startCreateEvent} className=\"btn\">Create Event</button>\r\n          </div>\r\n        )}\r\n        {this.state.isLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n            <EventList openViewDetails={this.onDetailsHandler} events={this.state.events} userId={this.context.userId}></EventList>\r\n          )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsPage\r\n"]},"metadata":{},"sourceType":"module"}