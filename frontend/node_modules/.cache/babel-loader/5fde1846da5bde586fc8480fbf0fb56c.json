{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\src\\\\pages\\\\Race\\\\Races.js\";\nimport React, { Component } from \"react\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport AuthContext from \"../../context/auth-context\";\nimport AppBar from '@material-ui/core/AppBar';\nimport { Calendar } from 'primereact/calendar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport RaceTabPanel from '../../components/Race/RaceTabPanel';\n\nvar Races =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Races, _Component);\n\n  function Races() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Races);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Races)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: false,\n      programDate: \"\",\n      selecteRace: 0,\n      races: []\n    };\n\n    _this.componentDidMount = function () {};\n\n    _this.handleChange = function (event, newValue) {\n      _this.setState({\n        selecteRace: newValue\n      });\n    };\n\n    _this.onProgramDateChange = function (e) {\n      _this.setState({\n        programDate: e.value,\n        isLoading: true\n      }, function () {\n        return _this.loadProgramRaces();\n      });\n    };\n\n    _this.loadProgramRaces = function () {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        query SingleProgram($date: String!) {\\n          singleProgram(date: $date) {\\n            races {\\n              event\\n              distance\\n              claimings\\n              procedences\\n              horseAge\\n              spec\\n              purse\\n              horses {\\n                _id\\n                name\\n                weight\\n                age\\n                color\\n                sex\\n                sire\\n                dam\\n                stable {         \\n                  _id\\n                  name\\n                }\\n                raceDetails {\\n                  startingPosition\\n                  claiming\\n                  horseMedications\\n                  horseEquipments\\n                  jockey{\\n                    name\\n                  } \\n                  jockeyWeight\\n                  stable {\\n                    name\\n                  }\\n                  trainer {\\n                    name\\n                  }\\n                  date\\n                  raceNumber\\n                  trackCondition          \\n                  distance\\n                   times {\\n                    quarterMile\\n                  }\\n                  positions{\\n                    start\\n                  }\\n                  lengths{\\n                    quarterMile\\n                  }\\n                  bet\\n                  trainingTimes{\\n                    date\\n                  }\\n                  horseWeight\\n                  claimed\\n                  claimedBy{\\n                    name\\n                  }\\n                  retired\\n                  retiredDetails\\n                  totalHorses\\n                  horseAge\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \",\n        variables: {\n          date: _this.state.programDate\n        }\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        if (resData && resData.data.singleProgram) {\n          _this.setState({\n            races: resData.data.singleProgram.races,\n            exist: true,\n            isLoading: false\n          });\n        } else {\n          _this.setState({\n            isLoading: false\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Races, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tabs = this.state.races.map(function (race) {\n        return React.createElement(Tab, {\n          key: race.event,\n          label: race.event,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        });\n      });\n      var RaceTabs = this.state.races.map(function (race, index) {\n        return React.createElement(RaceTabPanel, {\n          key: index,\n          race: race,\n          value: _this2.state.selecteRace,\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        });\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Select Program Date: \"), React.createElement(\"div\", {\n        className: \"col-md-3 mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(Calendar, {\n        dateFormat: \"dd/mm/yy\",\n        showIcon: true,\n        id: \"date\",\n        value: this.state.programDate,\n        onChange: this.onProgramDateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }))), this.state.races.length > 0 && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        style: {\n          flexGrow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        value: this.state.selecteRace,\n        onChange: this.handleChange,\n        indicatorColor: \"primary\",\n        textColor: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, tabs)), RaceTabs), this.state.isLoading && React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Races;\n}(Component);\n\nRaces.contextType = AuthContext;\nexport default Races;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\frontend\\src\\pages\\Race\\Races.js"],"names":["React","Component","Spinner","AuthContext","AppBar","Calendar","Tabs","Tab","Paper","RaceTabPanel","Races","state","isLoading","programDate","selecteRace","races","componentDidMount","handleChange","event","newValue","setState","onProgramDateChange","e","value","loadProgramRaces","requestBody","query","variables","date","fetch","method","body","JSON","stringify","headers","then","result","status","Error","json","resData","data","singleProgram","exist","catch","error","console","log","tabs","map","race","RaceTabs","index","length","flexGrow","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\n\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport { Calendar } from 'primereact/calendar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport RaceTabPanel from '../../components/Race/RaceTabPanel'\r\n\r\nclass Races extends Component {\r\n  static contextType = AuthContext\r\n\r\n  state = {\r\n    isLoading: false,\r\n    programDate: \"\",\r\n    selecteRace: 0,\r\n    races: []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n  }\r\n\r\n  handleChange = (event, newValue) => {\r\n    this.setState({ selecteRace: newValue })\r\n  }\r\n\r\n  onProgramDateChange = (e) => {\r\n    this.setState({ programDate: e.value, isLoading: true }, () => this.loadProgramRaces());\r\n  }\r\n\r\n  loadProgramRaces = () => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        query SingleProgram($date: String!) {\r\n          singleProgram(date: $date) {\r\n            races {\r\n              event\r\n              distance\r\n              claimings\r\n              procedences\r\n              horseAge\r\n              spec\r\n              purse\r\n              horses {\r\n                _id\r\n                name\r\n                weight\r\n                age\r\n                color\r\n                sex\r\n                sire\r\n                dam\r\n                stable {         \r\n                  _id\r\n                  name\r\n                }\r\n                raceDetails {\r\n                  startingPosition\r\n                  claiming\r\n                  horseMedications\r\n                  horseEquipments\r\n                  jockey{\r\n                    name\r\n                  } \r\n                  jockeyWeight\r\n                  stable {\r\n                    name\r\n                  }\r\n                  trainer {\r\n                    name\r\n                  }\r\n                  date\r\n                  raceNumber\r\n                  trackCondition          \r\n                  distance\r\n                   times {\r\n                    quarterMile\r\n                  }\r\n                  positions{\r\n                    start\r\n                  }\r\n                  lengths{\r\n                    quarterMile\r\n                  }\r\n                  bet\r\n                  trainingTimes{\r\n                    date\r\n                  }\r\n                  horseWeight\r\n                  claimed\r\n                  claimedBy{\r\n                    name\r\n                  }\r\n                  retired\r\n                  retiredDetails\r\n                  totalHorses\r\n                  horseAge\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        date: this.state.programDate\r\n      }\r\n    }\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\");\r\n        }\r\n        return result.json();\r\n      })\r\n      .then(resData => {\r\n        if (resData && resData.data.singleProgram) {\r\n          this.setState({ races: resData.data.singleProgram.races, exist: true, isLoading: false });          \r\n        }\r\n        else {\r\n          this.setState({ isLoading: false });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const tabs = this.state.races.map(race => {\r\n      return (\r\n        <Tab key={race.event} label={race.event} />\r\n      )\r\n    })\r\n    const RaceTabs = this.state.races.map((race, index) => {      \r\n      return (\r\n        <RaceTabPanel key={index} race={race} value={this.state.selecteRace} index={index} />\r\n      )\r\n    })\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <strong>Select Program Date: </strong>\r\n          <div className=\"col-md-3 mb-3\">\r\n            <Calendar dateFormat=\"dd/mm/yy\" showIcon={true} id=\"date\" value={this.state.programDate} onChange={this.onProgramDateChange}></Calendar>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.state.races.length > 0 && (\r\n            <React.Fragment>\r\n              <Paper style={{ flexGrow: 1 }}>\r\n                <Tabs value={this.state.selecteRace} onChange={this.handleChange} indicatorColor=\"primary\" textColor=\"primary\" >\r\n                  {tabs}\r\n                </Tabs>\r\n              </Paper>\r\n              { RaceTabs }              \r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        {\r\n          this.state.isLoading && <Spinner />\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Races"]},"metadata":{},"sourceType":"module"}