{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\frontend\\\\src\\\\pages\\\\Race\\\\Races.js\";\nimport React, { Component } from \"react\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport AuthContext from \"../../context/auth-context\";\nimport { Calendar } from 'primereact/calendar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Paper from '@material-ui/core/Paper';\nimport RaceTabPanel from '../../components/Race/RaceTabPanel';\n\nvar Races =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Races, _Component);\n\n  function Races() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Races);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Races)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: false,\n      programDate: \"\",\n      selecteRace: 0,\n      races: [],\n      jockeys: [],\n      stables: [],\n      trainers: []\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchJockeys();\n\n      _this.fetchStables();\n\n      _this.fetchTrainers();\n\n      _this.events = [\"1ra Carrera\", \"2da Carrera\", \"3ra Carrera\", \"4ta Carrera\", \"5ta Carrera\", \"6ta Carrera\"];\n    };\n\n    _this.handleChange = function (event, newValue) {\n      _this.setState({\n        selecteRace: newValue\n      });\n    };\n\n    _this.onProgramDateChange = function (e) {\n      _this.setState({\n        programDate: e.value,\n        isLoading: true,\n        selecteRace: 0\n      }, function () {\n        return _this.loadProgramRaces();\n      });\n    };\n\n    _this.fetchJockeys = function () {\n      //setLoading(true);\n      var requestBody = {\n        query: \"\\n        query {\\n          jockeys {\\n            _id\\n            name            \\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          jockeys: resData.data.jockeys\n        });\n      }).catch(function (error) {\n        console.log(error); //this.setState({ isLoading: false });\n      });\n    };\n\n    _this.fetchStables = function () {\n      //setLoading(true);\n      var requestBody = {\n        query: \"\\n        query {\\n          stables {\\n            _id\\n            name            \\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          stables: resData.data.stables\n        });\n      }).catch(function (error) {\n        console.log(error); //this.setState({ isLoading: false });\n      });\n    };\n\n    _this.fetchTrainers = function () {\n      //setLoading(true);\n      var requestBody = {\n        query: \"\\n        query {\\n          trainers {\\n            _id\\n            name            \\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          trainers: resData.data.trainers\n        });\n      }).catch(function (error) {\n        console.log(error); //this.setState({ isLoading: false });\n      });\n    };\n\n    _this.loadProgramRaces = function () {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        query SingleProgram($date: String!) {\\n          singleProgram(date: $date) {\\n            races {\\n              _id\\n              event\\n              distance\\n              claimings\\n              procedences\\n              horseAge\\n              spec\\n              purse\\n              horses {\\n                _id\\n                name\\n                weight\\n                age\\n                color\\n                sex\\n                sire\\n                dam\\n                stable {         \\n                  _id\\n                  name                  \\n                }\\n                raceDetails {\\n                  _id\\n                  startingPosition\\n                  claiming\\n                  horseMedications\\n                  horseEquipments\\n                  jockey{\\n                    name\\n                  } \\n                  jockeyWeight\\n                  stable {\\n                    name\\n                  }\\n                  trainer {\\n                    name\\n                  }\\n                  date\\n                  raceNumber\\n                  trackCondition          \\n                  distance\\n                   times {\\n                    quarterMile\\n                  }\\n                  positions{\\n                    start\\n                  }\\n                  lengths{\\n                    quarterMile\\n                  }\\n                  bet\\n                  trainingTimes{\\n                    date\\n                  }\\n                  horseWeight\\n                  claimed\\n                  claimedBy{\\n                    name\\n                  }\\n                  retired\\n                  retiredDetails\\n                  totalHorses\\n                  horseAge\\n                  comments\\n                }\\n              }\\n            }\\n          }\\n        }\\n      \",\n        variables: {\n          date: _this.state.programDate\n        }\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        if (resData && resData.data.singleProgram) {\n          _this.setState({\n            races: resData.data.singleProgram.races,\n            exist: true,\n            isLoading: false\n          });\n        } else {\n          _this.setState({\n            isLoading: false\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.addHorseToRace = function (raceIndex, raceId, selectedHorse) {\n      var requestBody = {\n        query: \"\\n        mutation AddHorse($raceId: ID, $horseId: ID) {\\n          addHorse(raceId: $raceId, horseId: $horseId) {\\n            _id\\n            event\\n            distance\\n            claimings\\n            procedences\\n            horseAge\\n            spec\\n            purse\\n            horses {\\n              _id\\n              name\\n              weight\\n              age\\n              color\\n              sex\\n              sire\\n              dam\\n              stable {         \\n                _id\\n                name                  \\n              }\\n              raceDetails {\\n                startingPosition\\n                claiming\\n                horseMedications\\n                horseEquipments\\n                jockey{\\n                  name\\n                } \\n                jockeyWeight\\n                stable {\\n                  name\\n                }\\n                trainer {\\n                  name\\n                }\\n                date\\n                raceNumber\\n                trackCondition          \\n                distance\\n                  times {\\n                  quarterMile\\n                }\\n                positions{\\n                  start\\n                }\\n                lengths{\\n                  quarterMile\\n                }\\n                bet\\n                trainingTimes{\\n                  date\\n                }\\n                horseWeight\\n                claimed\\n                claimedBy{\\n                  name\\n                }\\n                retired\\n                retiredDetails\\n                totalHorses\\n                horseAge\\n                comments\\n              }\\n            }\\n          }\\n        }\\n      \",\n        variables: {\n          raceId: raceId,\n          horseId: selectedHorse._id\n        }\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState(function (prevState) {\n          var races = prevState.races;\n          races[raceIndex] = resData.data.addHorse;\n          return _objectSpread({}, prevState, {\n            races: races,\n            isLoading: false\n          });\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Races, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var tabs = this.state.races.map(function (race) {\n        return React.createElement(Tab, {\n          key: race.event,\n          label: _this2.events[race.event - 1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369\n          },\n          __self: this\n        });\n      });\n      var RaceTabs = this.state.races.map(function (race, index) {\n        return React.createElement(RaceTabPanel, {\n          programDate: _this2.state.programDate,\n          horseaddedtorace: _this2.addHorseToRace,\n          key: index,\n          race: race,\n          value: _this2.state.selecteRace,\n          index: index,\n          jockeys: _this2.state.jockeys,\n          stables: _this2.state.stables,\n          trainers: _this2.state.trainers,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 374\n          },\n          __self: this\n        });\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }, \"Select Program Date: \"), React.createElement(\"div\", {\n        className: \"col-md-3 mb-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(Calendar, {\n        readOnlyInput: true,\n        dateFormat: \"dd/mm/yy\",\n        showIcon: true,\n        id: \"date\",\n        value: this.state.programDate,\n        onChange: this.onProgramDateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }))), this.state.races.length > 0 && React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        style: {\n          flexGrow: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, React.createElement(Tabs, {\n        value: this.state.selecteRace,\n        onChange: this.handleChange,\n        indicatorColor: \"primary\",\n        textColor: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, tabs)), RaceTabs), this.state.isLoading && React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Races;\n}(Component);\n\nRaces.contextType = AuthContext;\nexport default Races;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\frontend\\src\\pages\\Race\\Races.js"],"names":["React","Component","Spinner","AuthContext","Calendar","Tabs","Tab","Paper","RaceTabPanel","Races","state","isLoading","programDate","selecteRace","races","jockeys","stables","trainers","componentDidMount","fetchJockeys","fetchStables","fetchTrainers","events","handleChange","event","newValue","setState","onProgramDateChange","e","value","loadProgramRaces","requestBody","query","fetch","method","body","JSON","stringify","headers","then","result","status","Error","json","resData","data","catch","error","console","log","variables","date","singleProgram","exist","addHorseToRace","raceIndex","raceId","selectedHorse","horseId","_id","prevState","addHorse","tabs","map","race","RaceTabs","index","length","flexGrow","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\n\r\nimport AuthContext from \"../../context/auth-context\";\r\n\r\nimport { Calendar } from 'primereact/calendar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport RaceTabPanel from '../../components/Race/RaceTabPanel'\r\n\r\nclass Races extends Component {\r\n  static contextType = AuthContext\r\n\r\n  state = {\r\n    isLoading: false,\r\n    programDate: \"\",\r\n    selecteRace: 0,\r\n    races: [],\r\n    jockeys: [],\r\n    stables: [],\r\n    trainers: []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchJockeys();\r\n    this.fetchStables();\r\n    this.fetchTrainers();\r\n    this.events = [\r\n      \"1ra Carrera\",\r\n      \"2da Carrera\",\r\n      \"3ra Carrera\",\r\n      \"4ta Carrera\",\r\n      \"5ta Carrera\",\r\n      \"6ta Carrera\",\r\n    ]\r\n  }\r\n\r\n  handleChange = (event, newValue) => {\r\n    this.setState({ selecteRace: newValue })\r\n  }\r\n\r\n  onProgramDateChange = (e) => {\r\n    this.setState({ programDate: e.value, isLoading: true, selecteRace: 0 }, () => this.loadProgramRaces());\r\n  }\r\n\r\n  fetchJockeys = () => {\r\n    //setLoading(true);\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          jockeys {\r\n            _id\r\n            name            \r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState({ jockeys: resData.data.jockeys })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        //this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  fetchStables = () => {\r\n    //setLoading(true);\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          stables {\r\n            _id\r\n            name            \r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState({ stables: resData.data.stables })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        //this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  fetchTrainers = () => {\r\n    //setLoading(true);\r\n    const requestBody = {\r\n      query: `\r\n        query {\r\n          trainers {\r\n            _id\r\n            name            \r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState({ trainers: resData.data.trainers })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        //this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  loadProgramRaces = () => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        query SingleProgram($date: String!) {\r\n          singleProgram(date: $date) {\r\n            races {\r\n              _id\r\n              event\r\n              distance\r\n              claimings\r\n              procedences\r\n              horseAge\r\n              spec\r\n              purse\r\n              horses {\r\n                _id\r\n                name\r\n                weight\r\n                age\r\n                color\r\n                sex\r\n                sire\r\n                dam\r\n                stable {         \r\n                  _id\r\n                  name                  \r\n                }\r\n                raceDetails {\r\n                  _id\r\n                  startingPosition\r\n                  claiming\r\n                  horseMedications\r\n                  horseEquipments\r\n                  jockey{\r\n                    name\r\n                  } \r\n                  jockeyWeight\r\n                  stable {\r\n                    name\r\n                  }\r\n                  trainer {\r\n                    name\r\n                  }\r\n                  date\r\n                  raceNumber\r\n                  trackCondition          \r\n                  distance\r\n                   times {\r\n                    quarterMile\r\n                  }\r\n                  positions{\r\n                    start\r\n                  }\r\n                  lengths{\r\n                    quarterMile\r\n                  }\r\n                  bet\r\n                  trainingTimes{\r\n                    date\r\n                  }\r\n                  horseWeight\r\n                  claimed\r\n                  claimedBy{\r\n                    name\r\n                  }\r\n                  retired\r\n                  retiredDetails\r\n                  totalHorses\r\n                  horseAge\r\n                  comments\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        date: this.state.programDate\r\n      }\r\n    }\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\");\r\n        }\r\n        return result.json();\r\n      })\r\n      .then(resData => {\r\n        if (resData && resData.data.singleProgram) {\r\n          this.setState({ races: resData.data.singleProgram.races, exist: true, isLoading: false });\r\n        }\r\n        else {\r\n          this.setState({ isLoading: false });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n  addHorseToRace = (raceIndex, raceId, selectedHorse) => {\r\n    const requestBody = {\r\n      query: `\r\n        mutation AddHorse($raceId: ID, $horseId: ID) {\r\n          addHorse(raceId: $raceId, horseId: $horseId) {\r\n            _id\r\n            event\r\n            distance\r\n            claimings\r\n            procedences\r\n            horseAge\r\n            spec\r\n            purse\r\n            horses {\r\n              _id\r\n              name\r\n              weight\r\n              age\r\n              color\r\n              sex\r\n              sire\r\n              dam\r\n              stable {         \r\n                _id\r\n                name                  \r\n              }\r\n              raceDetails {\r\n                startingPosition\r\n                claiming\r\n                horseMedications\r\n                horseEquipments\r\n                jockey{\r\n                  name\r\n                } \r\n                jockeyWeight\r\n                stable {\r\n                  name\r\n                }\r\n                trainer {\r\n                  name\r\n                }\r\n                date\r\n                raceNumber\r\n                trackCondition          \r\n                distance\r\n                  times {\r\n                  quarterMile\r\n                }\r\n                positions{\r\n                  start\r\n                }\r\n                lengths{\r\n                  quarterMile\r\n                }\r\n                bet\r\n                trainingTimes{\r\n                  date\r\n                }\r\n                horseWeight\r\n                claimed\r\n                claimedBy{\r\n                  name\r\n                }\r\n                retired\r\n                retiredDetails\r\n                totalHorses\r\n                horseAge\r\n                comments\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        raceId: raceId,\r\n        horseId: selectedHorse._id\r\n      }\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {        \r\n        this.setState((prevState) => {\r\n          const races = prevState.races;\r\n          races[raceIndex] = resData.data.addHorse;\r\n          return {...prevState, races: races, isLoading: false }\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const tabs = this.state.races.map(race => {\r\n      return (\r\n        <Tab key={race.event} label={this.events[race.event - 1]} />\r\n      )\r\n    })\r\n    const RaceTabs = this.state.races.map((race, index) => {\r\n      return (\r\n        <RaceTabPanel programDate={this.state.programDate} horseaddedtorace={this.addHorseToRace} key={index} race={race} value={this.state.selecteRace} index={index} jockeys={this.state.jockeys} stables={this.state.stables} trainers={this.state.trainers}/>\r\n      )\r\n    })\r\n    return (\r\n      <React.Fragment>\r\n        <div>\r\n          <strong>Select Program Date: </strong>\r\n          <div className=\"col-md-3 mb-3\">\r\n            <Calendar readOnlyInput={true} dateFormat=\"dd/mm/yy\" showIcon={true} id=\"date\" value={this.state.programDate} onChange={this.onProgramDateChange}></Calendar>\r\n          </div>\r\n        </div>\r\n        {\r\n          this.state.races.length > 0 && (\r\n            <React.Fragment>\r\n              <Paper style={{ flexGrow: 1 }}>\r\n                <Tabs value={this.state.selecteRace} onChange={this.handleChange} indicatorColor=\"primary\" textColor=\"primary\" >\r\n                  {tabs}\r\n                </Tabs>\r\n              </Paper>\r\n              {RaceTabs}\r\n            </React.Fragment>\r\n          )\r\n        }\r\n\r\n        {\r\n          this.state.isLoading && <Spinner />\r\n        }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Races"]},"metadata":{},"sourceType":"module"}