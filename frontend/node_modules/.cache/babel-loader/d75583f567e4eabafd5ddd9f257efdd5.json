{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\src\\\\pages\\\\Bookings.js\";\nimport React, { Component } from \"react\";\nimport AuthContext from \"../context/auth-context\";\nimport BookingList from \"../components/Bookings/BookingList/BookingList\";\nimport Spinner from \"../components/Spinner/Spinner\";\n\nvar BookingsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookingsPage, _Component);\n\n  function BookingsPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BookingsPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BookingsPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: false,\n      bookings: []\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchBookings();\n    };\n\n    _this.onCancelBookingHandler = function (bookingId) {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        mutation { \\n          cancelBooking(bookingId: \\\"\".concat(bookingId, \"\\\") {\\n            _id\\n            title\\n            description\\n          }\\n        }\\n      \")\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \".concat(_this.context.token)\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState(function (prevState) {\n          return {\n            bookings: _this.state.bookings.filter(function (b) {\n              return b._id !== bookingId;\n            }),\n            isLoading: false\n          };\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.fetchBookings = function () {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        query { \\n          bookings {\\n            _id\\n            createdAt\\n            updatedAt\\n            event {\\n              _id\\n              title\\n              date\\n            }\\n            user {\\n              _id\\n            }\\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \".concat(_this.context.token)\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          bookings: resData.data.bookings,\n          isLoading: false\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BookingsPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.isLoading ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }) : React.createElement(BookingList, {\n        bookings: this.state.bookings,\n        onCancelBooking: this.onCancelBookingHandler,\n        userId: this.context.userId,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BookingsPage;\n}(Component);\n\nBookingsPage.contextType = AuthContext;\nexport default BookingsPage;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\graphql-react-event-booking\\frontend\\src\\pages\\Bookings.js"],"names":["React","Component","AuthContext","BookingList","Spinner","BookingsPage","state","isLoading","bookings","componentDidMount","fetchBookings","onCancelBookingHandler","bookingId","setState","requestBody","query","fetch","method","body","JSON","stringify","headers","context","token","then","result","status","Error","json","resData","prevState","filter","b","_id","catch","error","console","log","data","userId","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport AuthContext from \"../context/auth-context\";\r\n\r\nimport BookingList from \"../components/Bookings/BookingList/BookingList\"\r\nimport Spinner from \"../components/Spinner/Spinner\"\r\n\r\nclass BookingsPage extends Component {\r\n  static contextType = AuthContext\r\n\r\n  state = {\r\n    isLoading: false,\r\n    bookings: []\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchBookings()\r\n  }\r\n\r\n  onCancelBookingHandler = (bookingId) => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        mutation { \r\n          cancelBooking(bookingId: \"${bookingId}\") {\r\n            _id\r\n            title\r\n            description\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${this.context.token}`\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {        \r\n        this.setState(prevState => {\r\n          return {bookings: this.state.bookings.filter(b => b._id !== bookingId), isLoading: false}\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  fetchBookings = () => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        query { \r\n          bookings {\r\n            _id\r\n            createdAt\r\n            updatedAt\r\n            event {\r\n              _id\r\n              title\r\n              date\r\n            }\r\n            user {\r\n              _id\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${this.context.token}`\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {        \r\n        this.setState({ bookings: resData.data.bookings, isLoading: false });\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.isLoading ? (\r\n          <Spinner />\r\n        ) : (\r\n            <BookingList bookings={this.state.bookings} onCancelBooking={this.onCancelBookingHandler} userId={this.context.userId}></BookingList>\r\n          )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookingsPage"]},"metadata":{},"sourceType":"module"}