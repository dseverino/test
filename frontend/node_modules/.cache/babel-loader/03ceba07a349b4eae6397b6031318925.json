{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\src\\\\pages\\\\Events.js\";\nimport React, { Component } from \"react\";\nimport Modal from \"../components/Modal/Modal\";\nimport Backdrop from \"../components/Backdrop/Backdrop\";\nimport AuthContext from \"../context/auth-context\";\nimport \"../pages/Events.css\";\n\nvar EventsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EventsPage, _Component);\n\n  function EventsPage(props) {\n    var _this;\n\n    _classCallCheck(this, EventsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventsPage).call(this, props));\n    _this.state = {\n      creating: false,\n      events: []\n    };\n\n    _this.startCreateEvent = function () {\n      _this.setState({\n        creating: true\n      });\n    };\n\n    _this.modalCancelHandler = function () {\n      _this.setState({\n        creating: false\n      });\n    };\n\n    _this.modalConfirmHandler = function () {\n      console.log(\"submitted!!\");\n      var title = _this.titleElRef.current.value;\n      var price = _this.priceElRef.current.value;\n      var date = _this.dateElRef.current.value;\n      var description = _this.descriptionElRef.current.value;\n\n      if (title.trim().length === 0 || price.trim().length === 0 || date.trim().length === 0 || description.trim().length === 0) {\n        return;\n      }\n\n      var event = {\n        title: title,\n        price: price,\n        date: date,\n        description: description\n      };\n      console.log(event);\n      var requestBody = {\n        query: \"\\n        mutation { \\n          createEvent(eventInput: {title: \\\"\".concat(title, \"\\\", price: \").concat(price, \", date: \\\"\").concat(date, \"\\\", description: \\\"\").concat(description, \"\\\"}) {\\n            _id\\n            title\\n            description\\n            price\\n            date\\n            creator {\\n              _id\\n              email\\n            }\\n          }\\n        }\\n      \")\n      };\n      var token = _this.context.token;\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Authorization\": \"Bearer \".concat(token),\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        console.log(resData);\n\n        _this.fetchEvents();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.titleElRef = React.createRef();\n    _this.priceElRef = React.createRef();\n    _this.dateElRef = React.createRef();\n    _this.descriptionElRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(EventsPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchEvents();\n    }\n  }, {\n    key: \"fetchEvents\",\n    value: function fetchEvents() {\n      var _this2 = this;\n\n      var requestBody = {\n        query: \"\\n        query { \\n          events {\\n            _id\\n            title\\n            description\\n            price\\n            date\\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        console.log(resData.data.events);\n\n        _this2.setState({\n          events: resData.data.events\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var eventsList = this.state.events.map(function (event) {\n        return React.createElement(\"li\", {\n          className: \"events__list-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"event.title\");\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.creating && React.createElement(Backdrop, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), this.state.creating && React.createElement(Modal, {\n        title: \"Add Event\",\n        canCancel: true,\n        canConfirm: true,\n        onCancel: this.modalCancelHandler,\n        onConfirm: this.modalConfirmHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Title\"), React.createElement(\"input\", {\n        type: \"text\",\n        id: \"title\",\n        ref: this.titleElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"price\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Price\"), React.createElement(\"input\", {\n        type: \"number\",\n        id: \"price\",\n        ref: this.priceElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Date\"), React.createElement(\"input\", {\n        type: \"datetime-local\",\n        id: \"date\",\n        ref: this.dateElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Description\"), React.createElement(\"textarea\", {\n        id: \"description\",\n        rows: \"4\",\n        ref: this.descriptionElRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      })))), this.context.token && React.createElement(\"div\", {\n        className: \"events-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"Share your own Events!\"), React.createElement(\"button\", {\n        onClick: this.startCreateEvent,\n        className: \"btn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Create Event\")), React.createElement(\"ul\", {\n        className: \"events__list\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, eventsList));\n    }\n  }]);\n\n  return EventsPage;\n}(Component);\n\nEventsPage.contextType = AuthContext;\nexport default EventsPage;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\graphql-react-event-booking\\frontend\\src\\pages\\Events.js"],"names":["React","Component","Modal","Backdrop","AuthContext","EventsPage","props","state","creating","events","startCreateEvent","setState","modalCancelHandler","modalConfirmHandler","console","log","title","titleElRef","current","value","price","priceElRef","date","dateElRef","description","descriptionElRef","trim","length","event","requestBody","query","token","context","fetch","method","body","JSON","stringify","headers","then","result","status","Error","json","resData","fetchEvents","catch","error","createRef","data","eventsList","map","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport Modal from \"../components/Modal/Modal\";\r\nimport Backdrop from \"../components/Backdrop/Backdrop\";\r\n\r\nimport AuthContext from \"../context/auth-context\";\r\n\r\nimport \"../pages/Events.css\";\r\n\r\nclass EventsPage extends Component {\r\n  static contextType = AuthContext\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.titleElRef = React.createRef()\r\n    this.priceElRef = React.createRef()\r\n    this.dateElRef = React.createRef()\r\n    this.descriptionElRef = React.createRef()\r\n  }\r\n\r\n  state = {\r\n    creating: false,\r\n    events: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.fetchEvents();\r\n  }\r\n\r\n  startCreateEvent = () => {\r\n    this.setState({ creating: true })\r\n  }\r\n\r\n  modalCancelHandler = () => {\r\n    this.setState({ creating: false })\r\n  }\r\n\r\n  fetchEvents() {\r\n    const requestBody = {\r\n      query: `\r\n        query { \r\n          events {\r\n            _id\r\n            title\r\n            description\r\n            price\r\n            date\r\n          }\r\n        }\r\n      `\r\n    }\r\n    \r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        console.log(resData.data.events)\r\n        this.setState({events: resData.data.events})\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  modalConfirmHandler = () => {\r\n    console.log(\"submitted!!\")\r\n    const title = this.titleElRef.current.value;\r\n    const price = this.priceElRef.current.value;\r\n    const date = this.dateElRef.current.value;\r\n    const description = this.descriptionElRef.current.value;\r\n\r\n    if (title.trim().length === 0 || price.trim().length === 0 || date.trim().length === 0 || description.trim().length === 0) {\r\n      return;\r\n    }\r\n\r\n    const event = { title, price, date, description }\r\n    console.log(event)\r\n\r\n    const requestBody = {\r\n      query: `\r\n        mutation { \r\n          createEvent(eventInput: {title: \"${title}\", price: ${price}, date: \"${date}\", description: \"${description}\"}) {\r\n            _id\r\n            title\r\n            description\r\n            price\r\n            date\r\n            creator {\r\n              _id\r\n              email\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    const token = this.context.token\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Authorization\": `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        console.log(resData)\r\n        this.fetchEvents()\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const eventsList = this.state.events.map(event => {\r\n      return <li className=\"events__list-item\">event.title</li>\r\n    });\r\n\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.creating && <Backdrop></Backdrop>}\r\n        {this.state.creating && (\r\n          <Modal title=\"Add Event\" canCancel canConfirm onCancel={this.modalCancelHandler} onConfirm={this.modalConfirmHandler}>\r\n            <form>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"title\">Title</label>\r\n                <input type=\"text\" id=\"title\" ref={this.titleElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"price\">Price</label>\r\n                <input type=\"number\" id=\"price\" ref={this.priceElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"date\">Date</label>\r\n                <input type=\"datetime-local\" id=\"date\" ref={this.dateElRef} />\r\n              </div>\r\n              <div className=\"form-control\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <textarea id=\"description\" rows=\"4\" ref={this.descriptionElRef} />\r\n              </div>\r\n            </form>\r\n          </Modal>\r\n        )}\r\n        {this.context.token && (\r\n          <div className=\"events-control\">\r\n            <p>Share your own Events!</p>\r\n            <button onClick={this.startCreateEvent} className=\"btn\">Create Event</button>\r\n          </div>\r\n        )}\r\n        <ul className=\"events__list\">\r\n          {eventsList}\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventsPage\r\n"]},"metadata":{},"sourceType":"module"}