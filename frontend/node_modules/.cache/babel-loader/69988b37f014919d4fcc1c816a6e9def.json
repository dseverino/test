{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\src\\\\pages\\\\Bookings.js\";\nimport React, { Component } from \"react\";\nimport AuthContext from \"../context/auth-context\";\nimport BookingList from \"../components/Bookings/BookingList/BookingList\";\nimport BookingsChart from \"../components/Bookings/BookingsChart/BookingsChart\";\nimport Spinner from \"../components/Spinner/Spinner\";\nimport BookingsControls from \"../components/Bookings/BookingsControls/BookingsControls\";\n\nvar BookingsPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BookingsPage, _Component);\n\n  function BookingsPage() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BookingsPage);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BookingsPage)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: false,\n      bookings: [],\n      outputType: 'list'\n    };\n\n    _this.componentDidMount = function () {\n      _this.fetchBookings();\n    };\n\n    _this.onCancelBookingHandler = function (bookingId) {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        mutation CancelBooking ($id: ID!){ \\n          cancelBooking(bookingId: $id) {\\n            _id\\n            title\\n            description\\n          }\\n        }\\n      \",\n        variables: {\n          id: bookingId\n        }\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \".concat(_this.context.token)\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState(function (prevState) {\n          return {\n            bookings: _this.state.bookings.filter(function (b) {\n              return b._id !== bookingId;\n            }),\n            isLoading: false\n          };\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.fetchBookings = function () {\n      _this.setState({\n        isLoading: true\n      });\n\n      var requestBody = {\n        query: \"\\n        query { \\n          bookings {\\n            _id\\n            createdAt\\n            updatedAt\\n            event {\\n              _id\\n              title\\n              date\\n            }\\n            user {\\n              _id\\n            }\\n          }\\n        }\\n      \"\n      };\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Authorization\": \"Bearer \".concat(_this.context.token)\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        _this.setState({\n          bookings: resData.data.bookings,\n          isLoading: false\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          isLoading: false\n        });\n      });\n    };\n\n    _this.changeOutputHandler = function (outputType) {\n      if (outputType === 'list') {\n        _this.setState({\n          outputType: 'list'\n        });\n      } else {\n        _this.setState({\n          outputType: 'chart'\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BookingsPage, [{\n    key: \"render\",\n    value: function render() {\n      var content = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      });\n\n      if (!this.state.isLoading) {\n        content = React.createElement(React.Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(BookingsControls, {\n          changeOutput: this.changeOutputHandler,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, this.state.outputType === 'list' ? React.createElement(BookingList, {\n          bookings: this.state.bookings,\n          onCancelBooking: this.onCancelBookingHandler,\n          userId: this.context.userId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }) : React.createElement(BookingsChart, {\n          bookings: this.state.bookings,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return BookingsPage;\n}(Component);\n\nBookingsPage.contextType = AuthContext;\nexport default BookingsPage;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\graphql-react-event-booking\\frontend\\src\\pages\\Bookings.js"],"names":["React","Component","AuthContext","BookingList","BookingsChart","Spinner","BookingsControls","BookingsPage","state","isLoading","bookings","outputType","componentDidMount","fetchBookings","onCancelBookingHandler","bookingId","setState","requestBody","query","variables","id","fetch","method","body","JSON","stringify","headers","context","token","then","result","status","Error","json","resData","prevState","filter","b","_id","catch","error","console","log","data","changeOutputHandler","content","userId","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport AuthContext from \"../context/auth-context\";\r\n\r\nimport BookingList from \"../components/Bookings/BookingList/BookingList\"\r\nimport BookingsChart from \"../components/Bookings/BookingsChart/BookingsChart\"\r\nimport Spinner from \"../components/Spinner/Spinner\"\r\nimport BookingsControls from \"../components/Bookings/BookingsControls/BookingsControls\"\r\n\r\nclass BookingsPage extends Component {\r\n  static contextType = AuthContext\r\n\r\n  state = {\r\n    isLoading: false,\r\n    bookings: [],\r\n    outputType: 'list'\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.fetchBookings()\r\n  }\r\n\r\n  onCancelBookingHandler = (bookingId) => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        mutation CancelBooking ($id: ID!){ \r\n          cancelBooking(bookingId: $id) {\r\n            _id\r\n            title\r\n            description\r\n          }\r\n        }\r\n      `,\r\n      variables: {\r\n        id: bookingId\r\n      }\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${this.context.token}`\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState(prevState => {\r\n          return { bookings: this.state.bookings.filter(b => b._id !== bookingId), isLoading: false }\r\n        })\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  fetchBookings = () => {\r\n    this.setState({ isLoading: true })\r\n    const requestBody = {\r\n      query: `\r\n        query { \r\n          bookings {\r\n            _id\r\n            createdAt\r\n            updatedAt\r\n            event {\r\n              _id\r\n              title\r\n              date\r\n            }\r\n            user {\r\n              _id\r\n            }\r\n          }\r\n        }\r\n      `\r\n    }\r\n\r\n    fetch(\"http://localhost:3000/graphql\", {\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"Authorization\": `Bearer ${this.context.token}`\r\n      }\r\n    })\r\n      .then(result => {\r\n        if (result.status !== 200 && result.status !== 201) {\r\n          throw new Error(\"Failed\")\r\n        }\r\n        return result.json()\r\n      })\r\n      .then(resData => {\r\n        this.setState({ bookings: resData.data.bookings, isLoading: false });\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        this.setState({ isLoading: false });\r\n      })\r\n  }\r\n\r\n  changeOutputHandler = outputType => {\r\n    if(outputType === 'list'){\r\n      this.setState({outputType: 'list'})\r\n    }\r\n    else {\r\n      this.setState({outputType: 'chart'})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let content = <Spinner />;\r\n    if (!this.state.isLoading) {\r\n      content = (\r\n        <React.Fragment>\r\n          <BookingsControls changeOutput={this.changeOutputHandler} />\r\n          <div>\r\n            {this.state.outputType === 'list' ? <BookingList bookings={this.state.bookings} onCancelBooking={this.onCancelBookingHandler} userId={this.context.userId} /> : <BookingsChart bookings={this.state.bookings} />}\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {content}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookingsPage"]},"metadata":{},"sourceType":"module"}