{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Domingo\\\\Desktop\\\\Git Projects\\\\test\\\\graphql-react-event-booking\\\\frontend\\\\src\\\\pages\\\\Auth.js\";\nimport React, { Component } from \"react\";\nimport AuthContext from \"../context/auth-context\";\nimport \"./Auth.css\";\n\nvar AuthPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AuthPage, _Component);\n\n  function AuthPage(props) {\n    var _this;\n\n    _classCallCheck(this, AuthPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AuthPage).call(this, props));\n    _this.state = {\n      isLogin: true\n    };\n\n    _this.changeTitle = function () {\n      _this.setState(function (prevState) {\n        return {\n          isLogin: !prevState.isLogin\n        };\n      });\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n      var email = _this.emailEl.current.value;\n      var password = _this.passwordEl.current.value;\n\n      if (email.trim().length === 0 || password.trim().length === 0) {\n        return;\n      }\n\n      var requestBody = {\n        query: \"\\n        query {\\n          login(email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\") {\\n            userId\\n            token\\n            tokenExpiration\\n          }\\n        }  \\n      \")\n      };\n\n      if (!_this.state.isLogin) {\n        requestBody = {\n          query: \"\\n          mutation { \\n            createUser(userInput: {email: \\\"\".concat(email, \"\\\", password: \\\"\").concat(password, \"\\\"}) {\\n              _id\\n              email\\n              password\\n            }\\n          }\\n        \")\n        };\n      }\n\n      fetch(\"http://localhost:3000/graphql\", {\n        method: 'POST',\n        body: JSON.stringify(requestBody),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (result) {\n        if (result.status !== 200 && result.status !== 201) {\n          throw new Error(\"Failed\");\n        }\n\n        return result.json();\n      }).then(function (resData) {\n        if (resData.data.login.token) {\n          _this.context.login(resData.data.login.token, resData.data.login.userId, resData.data.login.tokenExpiration);\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.emailEl = React.createRef();\n    _this.passwordEl = React.createRef();\n    return _this;\n  }\n\n  _createClass(AuthPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        className: \"auth-form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, \"E-Mail\"), React.createElement(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        ref: this.emailEl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Password\"), React.createElement(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        ref: this.passwordEl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        type: \"button\",\n        onClick: this.changeTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Switch to \", this.state.isLogin ? \"Signup\" : \"Login\")));\n    }\n  }]);\n\n  return AuthPage;\n}(Component);\n\nAuthPage.contextType = AuthContext;\nexport default AuthPage;","map":{"version":3,"sources":["C:\\Users\\Domingo\\Desktop\\Git Projects\\test\\graphql-react-event-booking\\frontend\\src\\pages\\Auth.js"],"names":["React","Component","AuthContext","AuthPage","props","state","isLogin","changeTitle","setState","prevState","submitHandler","event","preventDefault","email","emailEl","current","value","password","passwordEl","trim","length","requestBody","query","fetch","method","body","JSON","stringify","headers","then","result","status","Error","json","resData","data","login","token","context","userId","tokenExpiration","catch","error","console","log","createRef","contextType"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAO,YAAP;;IAEMC,Q;;;;;AAOJ,oBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,kFAAMA,KAAN;AADgB,UANlBC,KAMkB,GANV;AACNC,MAAAA,OAAO,EAAE;AADH,KAMU;;AAAA,UAMlBC,WANkB,GAMJ,YAAM;AAClB,YAAKC,QAAL,CAAc,UAACC,SAAD,EAAe;AAC3B,eAAO;AAACH,UAAAA,OAAO,EAAE,CAACG,SAAS,CAACH;AAArB,SAAP;AACD,OAFD;AAGD,KAViB;;AAAA,UAYlBI,aAZkB,GAYF,UAACC,KAAD,EAAW;AACzBA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,KAAK,GAAG,MAAKC,OAAL,CAAaC,OAAb,CAAqBC,KAAnC;AACA,UAAMC,QAAQ,GAAG,MAAKC,UAAL,CAAgBH,OAAhB,CAAwBC,KAAzC;;AAEA,UAAGH,KAAK,CAACM,IAAN,GAAaC,MAAb,KAAwB,CAAxB,IAA6BH,QAAQ,CAACE,IAAT,GAAgBC,MAAhB,KAA2B,CAA3D,EAA6D;AAC3D;AACD;;AACD,UAAIC,WAAW,GAAG;AAChBC,QAAAA,KAAK,wDAEeT,KAFf,6BAEqCI,QAFrC;AADW,OAAlB;;AAWA,UAAG,CAAC,MAAKZ,KAAL,CAAWC,OAAf,EAAuB;AACrBe,QAAAA,WAAW,GAAG;AACZC,UAAAA,KAAK,iFAEgCT,KAFhC,6BAEsDI,QAFtD;AADO,SAAd;AAWD;;AACDM,MAAAA,KAAK,CAAC,+BAAD,EAAiC;AACpCC,QAAAA,MAAM,EAAE,MAD4B;AAEpCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAF8B;AAGpCO,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AAH2B,OAAjC,CAAL,CAOCC,IAPD,CAOM,UAAAC,MAAM,EAAG;AACb,YAAGA,MAAM,CAACC,MAAP,KAAkB,GAAlB,IAAyBD,MAAM,CAACC,MAAP,KAAkB,GAA9C,EAAkD;AAChD,gBAAM,IAAIC,KAAJ,CAAU,QAAV,CAAN;AACD;;AACD,eAAOF,MAAM,CAACG,IAAP,EAAP;AACD,OAZD,EAaCJ,IAbD,CAaM,UAAAK,OAAO,EAAI;AACf,YAAGA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBC,KAAtB,EAA4B;AAC1B,gBAAKC,OAAL,CAAaF,KAAb,CAAmBF,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBC,KAAtC,EAA6CH,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBG,MAAhE,EAAwEL,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBI,eAA3F;AACD;AACF,OAjBD,EAkBCC,KAlBD,CAkBO,UAAAC,KAAK,EAAI;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,OApBD;AAqBD,KAjEiB;;AAEhB,UAAK5B,OAAL,GAAed,KAAK,CAAC6C,SAAN,EAAf;AACA,UAAK3B,UAAL,GAAkBlB,KAAK,CAAC6C,SAAN,EAAlB;AAHgB;AAIjB;;;;6BA+DQ;AACP,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKnC,aAArB;AAAoC,QAAA,SAAS,EAAC,WAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,OAAvB;AAA+B,QAAA,GAAG,EAAE,KAAKI,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF,EAKE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,EAAE,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAE,KAAKI,UAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CALF,EASE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE,KAAKX,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA4D,KAAKF,KAAL,CAAWC,OAAX,GAAqB,QAArB,GAAgC,OAA5F,CAFF,CATF,CADF;AAgBD;;;;EA3FoBL,S;;AAAjBE,Q,CAKG2C,W,GAAc5C,W;AAyFvB,eAAeC,QAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport AuthContext from \"../context/auth-context\";\r\n\r\nimport \"./Auth.css\"\r\n\r\nclass AuthPage extends Component {\r\n  state = {\r\n    isLogin: true\r\n  }\r\n\r\n  static contextType = AuthContext;\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.emailEl = React.createRef();\r\n    this.passwordEl = React.createRef();\r\n  }\r\n\r\n  changeTitle = () => {    \r\n    this.setState((prevState) => {      \r\n      return {isLogin: !prevState.isLogin}\r\n    })\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault()\r\n    const email = this.emailEl.current.value;\r\n    const password = this.passwordEl.current.value;\r\n\r\n    if(email.trim().length === 0 || password.trim().length === 0){\r\n      return;\r\n    }\r\n    let requestBody = {\r\n      query: `\r\n        query {\r\n          login(email: \"${email}\", password: \"${password}\") {\r\n            userId\r\n            token\r\n            tokenExpiration\r\n          }\r\n        }  \r\n      `\r\n    }\r\n    if(!this.state.isLogin){\r\n      requestBody = {\r\n        query: `\r\n          mutation { \r\n            createUser(userInput: {email: \"${email}\", password: \"${password}\"}) {\r\n              _id\r\n              email\r\n              password\r\n            }\r\n          }\r\n        `\r\n      }\r\n    }\r\n    fetch(\"http://localhost:3000/graphql\",{\r\n      method: 'POST',\r\n      body: JSON.stringify(requestBody),      \r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      }\r\n    })\r\n    .then(result =>{\r\n      if(result.status !== 200 && result.status !== 201){        \r\n        throw new Error(\"Failed\")        \r\n      }\r\n      return result.json()\r\n    })\r\n    .then(resData => {      \r\n      if(resData.data.login.token){\r\n        this.context.login(resData.data.login.token, resData.data.login.userId, resData.data.login.tokenExpiration)\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.log(error)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.submitHandler} className=\"auth-form\">\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"email\">E-Mail</label>\r\n          <input type=\"email\" id=\"email\" ref={this.emailEl} />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"password\">Password</label>\r\n          <input type=\"password\" id=\"password\" ref={this.passwordEl} />\r\n        </div>\r\n        <div className=\"form-actions\">          \r\n          <button type=\"submit\">Submit</button>\r\n          <button type=\"button\" onClick={this.changeTitle}>Switch to {this.state.isLogin ? \"Signup\" : \"Login\"}</button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AuthPage"]},"metadata":{},"sourceType":"module"}